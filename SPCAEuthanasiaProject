{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Euthanasia Factors Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial Data Reading, Cleaning, Combining"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "import math\n",
    "from sklearn import cluster\n",
    "from sklearn.decomposition import PCA\n",
    "import re\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "s16 = pd.read_excel(\"Behavior Euthanasia 2016-2020.xlsx\", sheet_name = '2016')\n",
    "s17 = pd.read_excel(\"Behavior Euthanasia 2016-2020.xlsx\", sheet_name = '2017')\n",
    "s18 = pd.read_excel(\"Behavior Euthanasia 2016-2020.xlsx\", sheet_name = '2018')\n",
    "s19 = pd.read_excel(\"Behavior Euthanasia 2016-2020.xlsx\", sheet_name = '2019')\n",
    "s20 = pd.read_excel(\"Behavior Euthanasia 2016-2020.xlsx\", sheet_name = '2020')\n",
    "s16 = s16.loc[~s16.index.duplicated(keep='first')]\n",
    "s17 = s17.loc[~s17.index.duplicated(keep='first')]\n",
    "s18 = s18.loc[~s18.index.duplicated(keep='first')]\n",
    "s19 = s19.loc[~s19.index.duplicated(keep='first')]\n",
    "s20 = s20.loc[~s20.index.duplicated(keep='first')]\n",
    "\n",
    "sframes = [s16, s17, s18, s19, s20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Outcome date</th>\n",
       "      <th>name</th>\n",
       "      <th>Breedtype</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>main reason</th>\n",
       "      <th>Code 1</th>\n",
       "      <th>secondary reason</th>\n",
       "      <th>Status</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A#</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>33809028</td>\n",
       "      <td>2017-01-02</td>\n",
       "      <td>Diva</td>\n",
       "      <td>dobie</td>\n",
       "      <td>FS</td>\n",
       "      <td>24.5kg</td>\n",
       "      <td>4y</td>\n",
       "      <td>leash reactive</td>\n",
       "      <td>4.0</td>\n",
       "      <td>rjm</td>\n",
       "      <td>adoption</td>\n",
       "      <td>merced</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34204286</td>\n",
       "      <td>2017-01-10</td>\n",
       "      <td>Dude</td>\n",
       "      <td>shih tzu</td>\n",
       "      <td>MN</td>\n",
       "      <td>9.9kg</td>\n",
       "      <td>9y</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3.0</td>\n",
       "      <td>handling sensitivity - skin issues</td>\n",
       "      <td>adoption</td>\n",
       "      <td>acc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33867509</td>\n",
       "      <td>2016-12-27</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>shepherd</td>\n",
       "      <td>FS</td>\n",
       "      <td>16.55kg</td>\n",
       "      <td>3y</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3.0</td>\n",
       "      <td>escape behaviors</td>\n",
       "      <td>adoption</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17160361</td>\n",
       "      <td>2016-12-23</td>\n",
       "      <td>Rusty</td>\n",
       "      <td>chi</td>\n",
       "      <td>MN</td>\n",
       "      <td>7.75kg</td>\n",
       "      <td>5y</td>\n",
       "      <td>fearful of strangers</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33698313</td>\n",
       "      <td>2016-12-26</td>\n",
       "      <td>Elmer</td>\n",
       "      <td>spaniel</td>\n",
       "      <td>MN</td>\n",
       "      <td>8.6kg</td>\n",
       "      <td>5y</td>\n",
       "      <td>lelash reactive - dogs and people</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Outcome date   name Breedtype gender   weight age  \\\n",
       "A#                                                           \n",
       "33809028   2017-01-02   Diva     dobie     FS   24.5kg  4y   \n",
       "34204286   2017-01-10   Dude  shih tzu     MN    9.9kg  9y   \n",
       "33867509   2016-12-27  Ariel  shepherd     FS  16.55kg  3y   \n",
       "17160361   2016-12-23  Rusty       chi     MN   7.75kg  5y   \n",
       "33698313   2016-12-26  Elmer   spaniel     MN    8.6kg  5y   \n",
       "\n",
       "                                main reason  Code 1  \\\n",
       "A#                                                    \n",
       "33809028                     leash reactive     4.0   \n",
       "34204286                            fearful     3.0   \n",
       "33867509                            fearful     3.0   \n",
       "17160361               fearful of strangers     3.0   \n",
       "33698313  lelash reactive - dogs and people     4.0   \n",
       "\n",
       "                            secondary reason    Status  source  \n",
       "A#                                                              \n",
       "33809028                                 rjm  adoption  merced  \n",
       "34204286  handling sensitivity - skin issues  adoption     acc  \n",
       "33867509                    escape behaviors  adoption  fresno  \n",
       "17160361                                 NaN  adoption     ACC  \n",
       "33698313                                 NaN  adoption     ACC  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a16 = pd.read_excel(\"Behavior Adoption 2016-2020 (1).xlsx\", sheet_name = '2016')\n",
    "a17 = pd.read_excel(\"Behavior Adoption 2016-2020 (1).xlsx\", sheet_name = '2017')\n",
    "a18 = pd.read_excel(\"Behavior Adoption 2016-2020 (1).xlsx\", sheet_name = '2018')\n",
    "a19 = pd.read_excel(\"Behavior Adoption 2016-2020 (1).xlsx\", sheet_name = '2019')\n",
    "a20 = pd.read_excel(\"Behavior Adoption 2016-2020 (1).xlsx\", sheet_name = '2020')\n",
    "a16 = a16.loc[~a16.index.duplicated(keep='first')]\n",
    "a17 = a17.loc[~a17.index.duplicated(keep='first')]\n",
    "a18 = a18.loc[~a18.index.duplicated(keep='first')]\n",
    "a19 = a19.loc[~a19.index.duplicated(keep='first')]\n",
    "a20 = a20.loc[~a20.index.duplicated(keep='first')]\n",
    "\n",
    "aframes = [a16, a17, a18, a19, a20]\n",
    "adoption = pd.concat(aframes, sort = False).set_index('A#')\n",
    "adoption.head()\n",
    "ad = adoption.iloc[:,0:9]\n",
    "ad['Status'] = 'adoption'\n",
    "ad['source'] = adoption['source']\n",
    "ad.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Outcome Date</th>\n",
       "      <th>AnimalName</th>\n",
       "      <th>PrimaryBreed</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Age</th>\n",
       "      <th>main reason</th>\n",
       "      <th>Code 1</th>\n",
       "      <th>secondary reason</th>\n",
       "      <th>Status</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AnimalNumber</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>A30828052</td>\n",
       "      <td>2016-10-26 12:27:00</td>\n",
       "      <td>Romy</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>FS</td>\n",
       "      <td>24kg</td>\n",
       "      <td>9mos</td>\n",
       "      <td>hand shy</td>\n",
       "      <td>3.0</td>\n",
       "      <td>reactive to children and strangers</td>\n",
       "      <td>transfer</td>\n",
       "      <td>merced</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A31809294</td>\n",
       "      <td>2016-10-23 12:44:00</td>\n",
       "      <td>Gaston</td>\n",
       "      <td>Terrier, Silky</td>\n",
       "      <td>MN</td>\n",
       "      <td>4.6kg</td>\n",
       "      <td>1yrs</td>\n",
       "      <td>aggression to dogs</td>\n",
       "      <td>2.0</td>\n",
       "      <td>aggression to people</td>\n",
       "      <td>transfer</td>\n",
       "      <td>acc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A32205137</td>\n",
       "      <td>2016-11-14 12:16:00</td>\n",
       "      <td>Reddy</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>MN</td>\n",
       "      <td>28kg</td>\n",
       "      <td>1yrs</td>\n",
       "      <td>fearful of strangers</td>\n",
       "      <td>3.0</td>\n",
       "      <td>rjm</td>\n",
       "      <td>transfer</td>\n",
       "      <td>madera</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A33250347</td>\n",
       "      <td>2016-10-15 17:15:00</td>\n",
       "      <td>Little Sebastian</td>\n",
       "      <td>Terrier</td>\n",
       "      <td>MN</td>\n",
       "      <td>10.6kg</td>\n",
       "      <td>4yrs</td>\n",
       "      <td>aggression to people</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A33388795</td>\n",
       "      <td>2016-11-12 16:08:00</td>\n",
       "      <td>Liam</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>MN</td>\n",
       "      <td>24.5kg</td>\n",
       "      <td>8mos</td>\n",
       "      <td>leash reactive to children and vehicles</td>\n",
       "      <td>4.0</td>\n",
       "      <td>leash reactive to dogs</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Outcome Date        AnimalName    PrimaryBreed Gender  \\\n",
       "AnimalNumber                                                                \n",
       "A30828052    2016-10-26 12:27:00              Romy        Shepherd     FS   \n",
       "A31809294    2016-10-23 12:44:00            Gaston  Terrier, Silky     MN   \n",
       "A32205137    2016-11-14 12:16:00             Reddy        Shepherd     MN   \n",
       "A33250347    2016-10-15 17:15:00  Little Sebastian         Terrier     MN   \n",
       "A33388795    2016-11-12 16:08:00              Liam        Shepherd     MN   \n",
       "\n",
       "              Weight   Age                              main reason  Code 1  \\\n",
       "AnimalNumber                                                                  \n",
       "A30828052       24kg  9mos                                 hand shy     3.0   \n",
       "A31809294      4.6kg  1yrs                       aggression to dogs     2.0   \n",
       "A32205137       28kg  1yrs                     fearful of strangers     3.0   \n",
       "A33250347     10.6kg  4yrs                     aggression to people     1.0   \n",
       "A33388795     24.5kg  8mos  leash reactive to children and vehicles     4.0   \n",
       "\n",
       "                                secondary reason    Status  source  \n",
       "AnimalNumber                                                        \n",
       "A30828052     reactive to children and strangers  transfer  merced  \n",
       "A31809294                   aggression to people  transfer     acc  \n",
       "A32205137                                    rjm  transfer  madera  \n",
       "A33250347                                    NaN  transfer  fresno  \n",
       "A33388795                 leash reactive to dogs  transfer  fresno  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t16 = pd.read_excel(\"Behavior Transfer 2016-2020 (1).xlsx\", sheet_name = '2016')\n",
    "t17 = pd.read_excel(\"Behavior Transfer 2016-2020 (1).xlsx\", sheet_name = '2017')\n",
    "t18 = pd.read_excel(\"Behavior Transfer 2016-2020 (1).xlsx\", sheet_name = '2018')\n",
    "t19 = pd.read_excel(\"Behavior Transfer 2016-2020 (1).xlsx\", sheet_name = '2019')\n",
    "t20 = pd.read_excel(\"Behavior Transfer 2016-2020 (1).xlsx\", sheet_name = '2020')\n",
    "t16 = t16.loc[~t16.index.duplicated(keep='first')]\n",
    "t17 = t17.loc[~t17.index.duplicated(keep='first')]\n",
    "t18 = t18.loc[~t18.index.duplicated(keep='first')]\n",
    "t19 = t19.loc[~t19.index.duplicated(keep='first')]\n",
    "t20 = t20.loc[~t20.index.duplicated(keep='first')]\n",
    "tframes = [t16, t17, t18, t19, t20]\n",
    "transfer = pd.concat(tframes, sort = False).set_index('AnimalNumber')\n",
    "transfer.head()\n",
    "\n",
    "tf = transfer.iloc[:,0:8]\n",
    "tf['secondary reason'] = transfer['secondary reason']\n",
    "tf['Status'] = 'transfer'\n",
    "tf['source'] = transfer['source']\n",
    "tf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#combine transfer and adoption datasets\n",
    "ad = ad.reset_index()\n",
    "tf = tf.reset_index()\n",
    "ad.columns = ['animal_id', 'outcome_date', 'name', 'breed', 'gender', 'weight', 'age', 'reason1', 'code1', 'reason2', 'Status', 'source'] \n",
    "tf.columns = ['animal_id', 'outcome_date', 'name', 'breed', 'gender', 'weight', 'age', 'reason1', 'code1', 'reason2', 'Status', 'source'] \n",
    "\n",
    "adtr_frames = [ad, tf]\n",
    "adtr = pd.concat(adtr_frames, sort=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outcome_date</th>\n",
       "      <th>name</th>\n",
       "      <th>breed</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>Status</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>animal_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>33809028</td>\n",
       "      <td>2017-01-02 00:00:00</td>\n",
       "      <td>Diva</td>\n",
       "      <td>dobie</td>\n",
       "      <td>FS</td>\n",
       "      <td>24.5kg</td>\n",
       "      <td>4y</td>\n",
       "      <td>leash reactive</td>\n",
       "      <td>4.0</td>\n",
       "      <td>rjm</td>\n",
       "      <td>adoption</td>\n",
       "      <td>merced</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34204286</td>\n",
       "      <td>2017-01-10 00:00:00</td>\n",
       "      <td>Dude</td>\n",
       "      <td>shih tzu</td>\n",
       "      <td>MN</td>\n",
       "      <td>9.9kg</td>\n",
       "      <td>9y</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3.0</td>\n",
       "      <td>handling sensitivity - skin issues</td>\n",
       "      <td>adoption</td>\n",
       "      <td>acc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33867509</td>\n",
       "      <td>2016-12-27 00:00:00</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>shepherd</td>\n",
       "      <td>FS</td>\n",
       "      <td>16.55kg</td>\n",
       "      <td>3y</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3.0</td>\n",
       "      <td>escape behaviors</td>\n",
       "      <td>adoption</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17160361</td>\n",
       "      <td>2016-12-23 00:00:00</td>\n",
       "      <td>Rusty</td>\n",
       "      <td>chi</td>\n",
       "      <td>MN</td>\n",
       "      <td>7.75kg</td>\n",
       "      <td>5y</td>\n",
       "      <td>fearful of strangers</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33698313</td>\n",
       "      <td>2016-12-26 00:00:00</td>\n",
       "      <td>Elmer</td>\n",
       "      <td>spaniel</td>\n",
       "      <td>MN</td>\n",
       "      <td>8.6kg</td>\n",
       "      <td>5y</td>\n",
       "      <td>lelash reactive - dogs and people</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A43298745</td>\n",
       "      <td>2019-12-15 13:23:00</td>\n",
       "      <td>Bryce</td>\n",
       "      <td>Retriever</td>\n",
       "      <td>MN</td>\n",
       "      <td>35kg</td>\n",
       "      <td>4yrs</td>\n",
       "      <td>leash reactive</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A24091168</td>\n",
       "      <td>2020-01-17 08:52:00</td>\n",
       "      <td>Canelo</td>\n",
       "      <td>Chihuahua, Short Coat</td>\n",
       "      <td>MN</td>\n",
       "      <td>3.8kg</td>\n",
       "      <td>5yrs</td>\n",
       "      <td>leash reactivity</td>\n",
       "      <td>4.0</td>\n",
       "      <td>aggression human</td>\n",
       "      <td>transfer</td>\n",
       "      <td>stockton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A43336444</td>\n",
       "      <td>2020-01-26 19:27:00</td>\n",
       "      <td>Skinner</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>MN</td>\n",
       "      <td>29.5kg</td>\n",
       "      <td>3yrs</td>\n",
       "      <td>leash reactivity</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A44463040</td>\n",
       "      <td>2020-07-18 00:00:00</td>\n",
       "      <td>Chesney</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>NM</td>\n",
       "      <td>34.9kg</td>\n",
       "      <td>4y</td>\n",
       "      <td>aggression to  dogs</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A45163367</td>\n",
       "      <td>2020-08-17 00:00:00</td>\n",
       "      <td>Watson</td>\n",
       "      <td>Border collie</td>\n",
       "      <td>NM</td>\n",
       "      <td>18.1kg</td>\n",
       "      <td>1yr</td>\n",
       "      <td>aggression to humans</td>\n",
       "      <td>NaN</td>\n",
       "      <td>leash reactivity</td>\n",
       "      <td>transfer</td>\n",
       "      <td>tulare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>407 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 outcome_date     name                  breed gender   weight  \\\n",
       "animal_id                                                                       \n",
       "33809028  2017-01-02 00:00:00     Diva                  dobie     FS   24.5kg   \n",
       "34204286  2017-01-10 00:00:00     Dude               shih tzu     MN    9.9kg   \n",
       "33867509  2016-12-27 00:00:00    Ariel               shepherd     FS  16.55kg   \n",
       "17160361  2016-12-23 00:00:00    Rusty                    chi     MN   7.75kg   \n",
       "33698313  2016-12-26 00:00:00    Elmer                spaniel     MN    8.6kg   \n",
       "...                       ...      ...                    ...    ...      ...   \n",
       "A43298745 2019-12-15 13:23:00    Bryce              Retriever     MN     35kg   \n",
       "A24091168 2020-01-17 08:52:00   Canelo  Chihuahua, Short Coat     MN    3.8kg   \n",
       "A43336444 2020-01-26 19:27:00  Skinner               Shepherd     MN   29.5kg   \n",
       "A44463040 2020-07-18 00:00:00  Chesney               Shepherd     NM   34.9kg   \n",
       "A45163367 2020-08-17 00:00:00   Watson          Border collie     NM   18.1kg   \n",
       "\n",
       "            age                            reason1  code1  \\\n",
       "animal_id                                                   \n",
       "33809028     4y                     leash reactive    4.0   \n",
       "34204286     9y                            fearful    3.0   \n",
       "33867509     3y                            fearful    3.0   \n",
       "17160361     5y               fearful of strangers    3.0   \n",
       "33698313     5y  lelash reactive - dogs and people    4.0   \n",
       "...         ...                                ...    ...   \n",
       "A43298745  4yrs                     leash reactive    4.0   \n",
       "A24091168  5yrs                   leash reactivity    4.0   \n",
       "A43336444  3yrs                   leash reactivity    4.0   \n",
       "A44463040    4y                aggression to  dogs    NaN   \n",
       "A45163367   1yr               aggression to humans    NaN   \n",
       "\n",
       "                                      reason2    Status    source  \n",
       "animal_id                                                          \n",
       "33809028                                  rjm  adoption    merced  \n",
       "34204286   handling sensitivity - skin issues  adoption       acc  \n",
       "33867509                     escape behaviors  adoption    fresno  \n",
       "17160361                                  NaN  adoption       ACC  \n",
       "33698313                                  NaN  adoption       ACC  \n",
       "...                                       ...       ...       ...  \n",
       "A43298745                                 NaN  transfer    fresno  \n",
       "A24091168                    aggression human  transfer  stockton  \n",
       "A43336444                                 NaN  transfer    fresno  \n",
       "A44463040                                 NaN  transfer    fresno  \n",
       "A45163367                    leash reactivity  transfer    tulare  \n",
       "\n",
       "[407 rows x 11 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr.set_index('animal_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['index', 'date_of_death', 'animal_id', 'name', 'breed_type', 'gender',\n",
       "       'weight', 'age', 'reason1', 'code1', 'reason2', 'code2', 'meds',\n",
       "       'source ', 'intake_date ', 'adoption_date ', 'return_date_1',\n",
       "       'adoption_date_2', 'return_date_2', 'adoption_date_3', 'return_date_3',\n",
       "       'adoption_date_4', 'return_date_4'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sf = pd.concat(sframes, sort = False).reset_index()\n",
    "sf = sf[sf.columns.drop(list(sf.filter(regex='Column')))]\n",
    "sf = sf[sf.columns.drop(list(sf.filter(regex='intake_reason')))]\n",
    "sf = sf.dropna(axis=0, how ='all')\n",
    "sf = sf.dropna(axis=1, how = 'all')\n",
    "\n",
    "sf.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adoptCols = list(sf.filter(regex='adoption').columns)\n",
    "# returnCols = list(sf.filter(regex='return').columns)\n",
    "# dateTimeCols = adoptCols + returnCols\n",
    "# dateTimeCols.append('intake_date ')\n",
    "# dateTimeCols.append('date_of_death')\n",
    "\n",
    "# for c in dateTimeCols:\n",
    "#     sf[c] = pd.to_datetime(sf[c])\n",
    "    \n",
    "sf['weight'] = sf['weight'].str.extract('(\\d+)', expand=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "for val in range(0, len(sf.age)):\n",
    "    if \"m\" in sf.age[val]:\n",
    "        sf.age[val] = int(re.sub(\"[^0-9]\",'', sf.age[val]))/12\n",
    "    else:\n",
    "        sf.age[val] = int(re.sub(\"[^0-9]\", \"\", sf.age[val]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf[\"code1\"] = sf[\"code1\"].astype('Int64')\n",
    "sf[\"code2\"] = sf[\"code2\"].astype('Int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "sf[[\"animal_id\", \"name\", \"breed_type\", \"gender\", \"reason1\", \"reason2\", \"code1\", \"code2\", \"meds\", \"source\"]] = sf[[\"animal_id\", \"name\", \"breed_type\", \"gender\", \"reason1\", \"reason2\", \"code1\", \"code2\", \"meds\", \"source \"]].astype(object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_of_death</th>\n",
       "      <th>name</th>\n",
       "      <th>breed_type</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>code2</th>\n",
       "      <th>...</th>\n",
       "      <th>adoption_date</th>\n",
       "      <th>return_date_1</th>\n",
       "      <th>adoption_date_2</th>\n",
       "      <th>return_date_2</th>\n",
       "      <th>adoption_date_3</th>\n",
       "      <th>return_date_3</th>\n",
       "      <th>adoption_date_4</th>\n",
       "      <th>return_date_4</th>\n",
       "      <th>source</th>\n",
       "      <th>Status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>animal_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>A24933697</td>\n",
       "      <td>2016-02-17 12:04:00</td>\n",
       "      <td>Simon</td>\n",
       "      <td>Pug</td>\n",
       "      <td>M</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2015-02-18</td>\n",
       "      <td>2015-04-03</td>\n",
       "      <td>2015-05-01</td>\n",
       "      <td>2016-02-13</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A30629255</td>\n",
       "      <td>2016-04-17 11:50:00</td>\n",
       "      <td>Cal</td>\n",
       "      <td>Retriever, Labrador</td>\n",
       "      <td>M</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2016-02-06</td>\n",
       "      <td>2016-02-21</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A30630727</td>\n",
       "      <td>2016-04-19 19:14:00</td>\n",
       "      <td>Delilah</td>\n",
       "      <td>Terrier, Pit Bull</td>\n",
       "      <td>F</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2016-01-30</td>\n",
       "      <td>2016-04-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A31254758</td>\n",
       "      <td>2016-05-06 08:39:00</td>\n",
       "      <td>Kaley</td>\n",
       "      <td>Pointer</td>\n",
       "      <td>F</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2016-04-15</td>\n",
       "      <td>2016-05-05</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>stockton</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A31529085</td>\n",
       "      <td>2016-05-18 13:51:00</td>\n",
       "      <td>Scully</td>\n",
       "      <td>Korean Jindo</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Fearful -T/M</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>hsus</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                date_of_death     name           breed_type gender weight age  \\\n",
       "animal_id                                                                       \n",
       "A24933697 2016-02-17 12:04:00    Simon                  Pug      M      9   2   \n",
       "A30629255 2016-04-17 11:50:00      Cal  Retriever, Labrador      M     33   3   \n",
       "A30630727 2016-04-19 19:14:00  Delilah    Terrier, Pit Bull      F     21   2   \n",
       "A31254758 2016-05-06 08:39:00    Kaley              Pointer      F     13   3   \n",
       "A31529085 2016-05-18 13:51:00   Scully         Korean Jindo      U    NaN   2   \n",
       "\n",
       "                        reason1 code1             reason2 code2  ...  \\\n",
       "animal_id                                                        ...   \n",
       "A24933697  Aggression-Human-U/U     1                 NaN   NaN  ...   \n",
       "A30629255  Aggression-Human-U/U     1                 NaN   NaN  ...   \n",
       "A30630727  Aggression-Human-U/U     1  Aggression to dogs     2  ...   \n",
       "A31254758  Aggression-Human-U/U     1  Aggression to dogs     2  ...   \n",
       "A31529085  Aggression-Human-U/U     1        Fearful -T/M     3  ...   \n",
       "\n",
       "          adoption_date  return_date_1 adoption_date_2 return_date_2  \\\n",
       "animal_id                                                              \n",
       "A24933697     2015-02-18    2015-04-03      2015-05-01    2016-02-13   \n",
       "A30629255     2016-02-06    2016-02-21             NaT           NaT   \n",
       "A30630727     2016-01-30    2016-04-17             NaT           NaT   \n",
       "A31254758     2016-04-15    2016-05-05             NaT           NaT   \n",
       "A31529085            NaT           NaT             NaT           NaT   \n",
       "\n",
       "          adoption_date_3 return_date_3 adoption_date_4 return_date_4  \\\n",
       "animal_id                                                               \n",
       "A24933697             NaT           NaT             NaT           NaT   \n",
       "A30629255             NaT           NaT             NaT           NaT   \n",
       "A30630727             NaT           NaT             NaT           NaT   \n",
       "A31254758             NaT           NaT             NaT           NaT   \n",
       "A31529085             NaT           NaT             NaT           NaT   \n",
       "\n",
       "             source      Status  \n",
       "animal_id                        \n",
       "A24933697       acc  euthanized  \n",
       "A30629255       acc  euthanized  \n",
       "A30630727       acc  euthanized  \n",
       "A31254758  stockton  euthanized  \n",
       "A31529085      hsus  euthanized  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sf[\"Status\"] = 'euthanized'\n",
    "sf['source'] = sf['source'].str.lower()\n",
    "sf = sf.iloc[:,1:].set_index('animal_id')\n",
    "sf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20d5f3bde08>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (25,5))\n",
    "sns.countplot(data = sf, x = \"source\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentage of dogs that were on meds when they were euthanized is 38%.\n"
     ]
    }
   ],
   "source": [
    "perc = (1-(sum(pd.isnull(sf[\"meds\"]))/len(sf[\"meds\"])))* 100\n",
    "perc\n",
    "print(f'The percentage of dogs that were on meds when they were euthanized is {round(perc)}%.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "animal_id\n",
       "A24933697     10\n",
       "A30629255     20\n",
       "A30630727     13\n",
       "A31254758      9\n",
       "A31529085    NaN\n",
       "            ... \n",
       "44435334       9\n",
       "44329330       4\n",
       "41304676       4\n",
       "30626956       3\n",
       "45564186     NaN\n",
       "Name: intake_adoption_diff, Length: 85, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sf['intake_adoption_diff'] = sf['adoption_date '] - sf['intake_date ']\n",
    "sf['intake_adoption_diff'] = sf['intake_adoption_diff'].astype(str)\n",
    "sf['intake_adoption_diff'] = sf['intake_adoption_diff'].str.extract('(\\d+)', expand=False)\n",
    "sf['intake_adoption_diff']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prep euth dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_of_death</th>\n",
       "      <th>name</th>\n",
       "      <th>breed_type</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>code2</th>\n",
       "      <th>...</th>\n",
       "      <th>return_date_1</th>\n",
       "      <th>adoption_date_2</th>\n",
       "      <th>return_date_2</th>\n",
       "      <th>adoption_date_3</th>\n",
       "      <th>return_date_3</th>\n",
       "      <th>adoption_date_4</th>\n",
       "      <th>return_date_4</th>\n",
       "      <th>source</th>\n",
       "      <th>Status</th>\n",
       "      <th>intake_adoption_diff</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>animal_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>A24933697</td>\n",
       "      <td>2016-02-17 12:04:00</td>\n",
       "      <td>Simon</td>\n",
       "      <td>Pug</td>\n",
       "      <td>M</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2015-04-03</td>\n",
       "      <td>2015-05-01</td>\n",
       "      <td>2016-02-13</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A30629255</td>\n",
       "      <td>2016-04-17 11:50:00</td>\n",
       "      <td>Cal</td>\n",
       "      <td>Retriever, Labrador</td>\n",
       "      <td>M</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2016-02-21</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A30630727</td>\n",
       "      <td>2016-04-19 19:14:00</td>\n",
       "      <td>Delilah</td>\n",
       "      <td>Terrier, Pit Bull</td>\n",
       "      <td>F</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2016-04-17</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A31254758</td>\n",
       "      <td>2016-05-06 08:39:00</td>\n",
       "      <td>Kaley</td>\n",
       "      <td>Pointer</td>\n",
       "      <td>F</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2016-05-05</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>stockton</td>\n",
       "      <td>euthanized</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>A31529085</td>\n",
       "      <td>2016-05-18 13:51:00</td>\n",
       "      <td>Scully</td>\n",
       "      <td>Korean Jindo</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Fearful -T/M</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>hsus</td>\n",
       "      <td>euthanized</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                date_of_death     name           breed_type gender weight age  \\\n",
       "animal_id                                                                       \n",
       "A24933697 2016-02-17 12:04:00    Simon                  Pug      M      9   2   \n",
       "A30629255 2016-04-17 11:50:00      Cal  Retriever, Labrador      M     33   3   \n",
       "A30630727 2016-04-19 19:14:00  Delilah    Terrier, Pit Bull      F     21   2   \n",
       "A31254758 2016-05-06 08:39:00    Kaley              Pointer      F     13   3   \n",
       "A31529085 2016-05-18 13:51:00   Scully         Korean Jindo      U    NaN   2   \n",
       "\n",
       "                        reason1 code1             reason2 code2  ...  \\\n",
       "animal_id                                                        ...   \n",
       "A24933697  Aggression-Human-U/U     1                 NaN   NaN  ...   \n",
       "A30629255  Aggression-Human-U/U     1                 NaN   NaN  ...   \n",
       "A30630727  Aggression-Human-U/U     1  Aggression to dogs     2  ...   \n",
       "A31254758  Aggression-Human-U/U     1  Aggression to dogs     2  ...   \n",
       "A31529085  Aggression-Human-U/U     1        Fearful -T/M     3  ...   \n",
       "\n",
       "          return_date_1 adoption_date_2 return_date_2 adoption_date_3  \\\n",
       "animal_id                                                               \n",
       "A24933697    2015-04-03      2015-05-01    2016-02-13             NaT   \n",
       "A30629255    2016-02-21             NaT           NaT             NaT   \n",
       "A30630727    2016-04-17             NaT           NaT             NaT   \n",
       "A31254758    2016-05-05             NaT           NaT             NaT   \n",
       "A31529085           NaT             NaT           NaT             NaT   \n",
       "\n",
       "          return_date_3 adoption_date_4 return_date_4    source      Status  \\\n",
       "animal_id                                                                     \n",
       "A24933697           NaT             NaT           NaT       acc  euthanized   \n",
       "A30629255           NaT             NaT           NaT       acc  euthanized   \n",
       "A30630727           NaT             NaT           NaT       acc  euthanized   \n",
       "A31254758           NaT             NaT           NaT  stockton  euthanized   \n",
       "A31529085           NaT             NaT           NaT      hsus  euthanized   \n",
       "\n",
       "          intake_adoption_diff  \n",
       "animal_id                       \n",
       "A24933697                   10  \n",
       "A30629255                   20  \n",
       "A30630727                   13  \n",
       "A31254758                    9  \n",
       "A31529085                  NaN  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "animal_id\n",
       "A24933697         acc\n",
       "A30629255         acc\n",
       "A30630727         acc\n",
       "A31254758    stockton\n",
       "A31529085        hsus\n",
       "               ...   \n",
       "44435334          acc\n",
       "44329330       fresno\n",
       "41304676       tulare\n",
       "30626956       merced\n",
       "45564186          acc\n",
       "Name: source, Length: 85, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sf.source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>animal_id</th>\n",
       "      <th>outcome_date</th>\n",
       "      <th>name</th>\n",
       "      <th>breed</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>source</th>\n",
       "      <th>Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A24933697</td>\n",
       "      <td>2016-02-17 12:04:00</td>\n",
       "      <td>Simon</td>\n",
       "      <td>Pug</td>\n",
       "      <td>M</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>A30629255</td>\n",
       "      <td>2016-04-17 11:50:00</td>\n",
       "      <td>Cal</td>\n",
       "      <td>Retriever, Labrador</td>\n",
       "      <td>M</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>A30630727</td>\n",
       "      <td>2016-04-19 19:14:00</td>\n",
       "      <td>Delilah</td>\n",
       "      <td>Terrier, Pit Bull</td>\n",
       "      <td>F</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>A31254758</td>\n",
       "      <td>2016-05-06 08:39:00</td>\n",
       "      <td>Kaley</td>\n",
       "      <td>Pointer</td>\n",
       "      <td>F</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>stockton</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>A31529085</td>\n",
       "      <td>2016-05-18 13:51:00</td>\n",
       "      <td>Scully</td>\n",
       "      <td>Korean Jindo</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Fearful -T/M</td>\n",
       "      <td>hsus</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  animal_id        outcome_date     name                breed gender  \\\n",
       "0      0  A24933697 2016-02-17 12:04:00    Simon                  Pug      M   \n",
       "1      1  A30629255 2016-04-17 11:50:00      Cal  Retriever, Labrador      M   \n",
       "2      2  A30630727 2016-04-19 19:14:00  Delilah    Terrier, Pit Bull      F   \n",
       "3      3  A31254758 2016-05-06 08:39:00    Kaley              Pointer      F   \n",
       "4      4  A31529085 2016-05-18 13:51:00   Scully         Korean Jindo      U   \n",
       "\n",
       "  weight age               reason1 code1             reason2    source  \\\n",
       "0      9   2  Aggression-Human-U/U     1                 NaN       acc   \n",
       "1     33   3  Aggression-Human-U/U     1                 NaN       acc   \n",
       "2     21   2  Aggression-Human-U/U     1  Aggression to dogs       acc   \n",
       "3     13   3  Aggression-Human-U/U     1  Aggression to dogs  stockton   \n",
       "4    NaN   2  Aggression-Human-U/U     1        Fearful -T/M      hsus   \n",
       "\n",
       "       Status  \n",
       "0  euthanized  \n",
       "1  euthanized  \n",
       "2  euthanized  \n",
       "3  euthanized  \n",
       "4  euthanized  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euth = sf.reset_index().iloc[:,0:10]\n",
    "euth['source'] = sf.reset_index()['source']\n",
    "                             \n",
    "euth['source']\n",
    "\n",
    "euth.columns = ['animal_id', 'outcome_date', 'name', 'breed', 'gender', 'weight', 'age', 'reason1', 'code1', 'reason2', 'source']\n",
    "\n",
    "euth['Status'] = 'euthanized'\n",
    "\n",
    "euth = euth.reset_index()\n",
    "\n",
    "euth.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>animal_id</th>\n",
       "      <th>outcome_date</th>\n",
       "      <th>name</th>\n",
       "      <th>breed</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>Status</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33809028</td>\n",
       "      <td>2017-01-02</td>\n",
       "      <td>Diva</td>\n",
       "      <td>dobie</td>\n",
       "      <td>FS</td>\n",
       "      <td>24.5kg</td>\n",
       "      <td>4y</td>\n",
       "      <td>leash reactive</td>\n",
       "      <td>4.0</td>\n",
       "      <td>rjm</td>\n",
       "      <td>adoption</td>\n",
       "      <td>merced</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>34204286</td>\n",
       "      <td>2017-01-10</td>\n",
       "      <td>Dude</td>\n",
       "      <td>shih tzu</td>\n",
       "      <td>MN</td>\n",
       "      <td>9.9kg</td>\n",
       "      <td>9y</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3.0</td>\n",
       "      <td>handling sensitivity - skin issues</td>\n",
       "      <td>adoption</td>\n",
       "      <td>acc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>33867509</td>\n",
       "      <td>2016-12-27</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>shepherd</td>\n",
       "      <td>FS</td>\n",
       "      <td>16.55kg</td>\n",
       "      <td>3y</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3.0</td>\n",
       "      <td>escape behaviors</td>\n",
       "      <td>adoption</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>17160361</td>\n",
       "      <td>2016-12-23</td>\n",
       "      <td>Rusty</td>\n",
       "      <td>chi</td>\n",
       "      <td>MN</td>\n",
       "      <td>7.75kg</td>\n",
       "      <td>5y</td>\n",
       "      <td>fearful of strangers</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>33698313</td>\n",
       "      <td>2016-12-26</td>\n",
       "      <td>Elmer</td>\n",
       "      <td>spaniel</td>\n",
       "      <td>MN</td>\n",
       "      <td>8.6kg</td>\n",
       "      <td>5y</td>\n",
       "      <td>lelash reactive - dogs and people</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index animal_id outcome_date   name     breed gender   weight age  \\\n",
       "0      0  33809028   2017-01-02   Diva     dobie     FS   24.5kg  4y   \n",
       "1      1  34204286   2017-01-10   Dude  shih tzu     MN    9.9kg  9y   \n",
       "2      2  33867509   2016-12-27  Ariel  shepherd     FS  16.55kg  3y   \n",
       "3      3  17160361   2016-12-23  Rusty       chi     MN   7.75kg  5y   \n",
       "4      4  33698313   2016-12-26  Elmer   spaniel     MN    8.6kg  5y   \n",
       "\n",
       "                             reason1  code1  \\\n",
       "0                     leash reactive    4.0   \n",
       "1                            fearful    3.0   \n",
       "2                            fearful    3.0   \n",
       "3               fearful of strangers    3.0   \n",
       "4  lelash reactive - dogs and people    4.0   \n",
       "\n",
       "                              reason2    Status  source  \n",
       "0                                 rjm  adoption  merced  \n",
       "1  handling sensitivity - skin issues  adoption     acc  \n",
       "2                    escape behaviors  adoption  fresno  \n",
       "3                                 NaN  adoption     ACC  \n",
       "4                                 NaN  adoption     ACC  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr = adtr.reset_index()\n",
    "adtr.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clean up adtr dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "adtr['code1'] = adtr['code1'].astype('Int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "adtr['age'] = adtr['age'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "for val in range(0, len(adtr.age)):\n",
    "    if \"m\" in adtr.age[val]:\n",
    "        numeric_filter = filter(str.isdigit, adtr.age[val])\n",
    "        adtr.age[val] = int(\"\".join(numeric_filter))/12\n",
    "    elif \"y\" in adtr.age[val]:\n",
    "        numeric_filter = filter(str.isdigit, adtr.age[val])\n",
    "        adtr.age[val] = int(\"\".join(numeric_filter))\n",
    "    else:\n",
    "        continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "adtr = adtr.drop(adtr.index[376]).reset_index()\n",
    "adtr['age'] = pd.to_numeric(adtr['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "adtr['weight'] = adtr['weight'].str.extract('(\\d+)', expand=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>animal_id</th>\n",
       "      <th>outcome_date</th>\n",
       "      <th>name</th>\n",
       "      <th>breed</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>source</th>\n",
       "      <th>Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A24933697</td>\n",
       "      <td>2016-02-17 12:04:00</td>\n",
       "      <td>Simon</td>\n",
       "      <td>Pug</td>\n",
       "      <td>M</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>A30629255</td>\n",
       "      <td>2016-04-17 11:50:00</td>\n",
       "      <td>Cal</td>\n",
       "      <td>Retriever, Labrador</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>A30630727</td>\n",
       "      <td>2016-04-19 19:14:00</td>\n",
       "      <td>Delilah</td>\n",
       "      <td>Terrier, Pit Bull</td>\n",
       "      <td>F</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>acc</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>A31254758</td>\n",
       "      <td>2016-05-06 08:39:00</td>\n",
       "      <td>Kaley</td>\n",
       "      <td>Pointer</td>\n",
       "      <td>F</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Aggression to dogs</td>\n",
       "      <td>stockton</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>A31529085</td>\n",
       "      <td>2016-05-18 13:51:00</td>\n",
       "      <td>Scully</td>\n",
       "      <td>Korean Jindo</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>Aggression-Human-U/U</td>\n",
       "      <td>1</td>\n",
       "      <td>Fearful -T/M</td>\n",
       "      <td>hsus</td>\n",
       "      <td>euthanized</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  animal_id        outcome_date     name                breed gender  \\\n",
       "0      0  A24933697 2016-02-17 12:04:00    Simon                  Pug      M   \n",
       "1      1  A30629255 2016-04-17 11:50:00      Cal  Retriever, Labrador      M   \n",
       "2      2  A30630727 2016-04-19 19:14:00  Delilah    Terrier, Pit Bull      F   \n",
       "3      3  A31254758 2016-05-06 08:39:00    Kaley              Pointer      F   \n",
       "4      4  A31529085 2016-05-18 13:51:00   Scully         Korean Jindo      U   \n",
       "\n",
       "   weight age               reason1 code1             reason2    source  \\\n",
       "0     9.0   2  Aggression-Human-U/U     1                 NaN       acc   \n",
       "1    33.0   3  Aggression-Human-U/U     1                 NaN       acc   \n",
       "2    21.0   2  Aggression-Human-U/U     1  Aggression to dogs       acc   \n",
       "3    13.0   3  Aggression-Human-U/U     1  Aggression to dogs  stockton   \n",
       "4     NaN   2  Aggression-Human-U/U     1        Fearful -T/M      hsus   \n",
       "\n",
       "       Status  \n",
       "0  euthanized  \n",
       "1  euthanized  \n",
       "2  euthanized  \n",
       "3  euthanized  \n",
       "4  euthanized  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euth['weight'] = pd.to_numeric(euth['weight'])\n",
    "adtr['weight'] = pd.to_numeric(adtr['weight'])\n",
    "\n",
    "euth.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "chi                  55\n",
       "shepherd             50\n",
       "terrier              39\n",
       "pit bull             28\n",
       "retriever            28\n",
       "                     ..\n",
       "sheep dog             1\n",
       "Italian Greyhound     1\n",
       "dachshund             1\n",
       "boxer                 1\n",
       "min poodle            1\n",
       "Name: breed, Length: 91, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr.breed.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing numeric means with t-tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The p-value associated with the observed value of the test statistic in a t test for weight is 0.002620228366928239, \n",
      "which is significant at the alpha level 0.05.\n"
     ]
    }
   ],
   "source": [
    "adtr_weight_na = adtr.weight.dropna()\n",
    "euth_weight_na = euth.weight.dropna()\n",
    "\n",
    "t, p = stats.ttest_ind(\n",
    "    adtr_weight_na.values,\n",
    "    euth_weight_na.values,\n",
    "    equal_var = False\n",
    ")\n",
    "\n",
    "print(f'The p-value associated with the observed value of the test statistic in a t test for weight is {p}, \\nwhich is significant at the alpha level 0.05.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16.448275862068964 20.107142857142858\n"
     ]
    }
   ],
   "source": [
    "print(adtr_weight_na.mean(), euth_weight_na.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20d603eb908>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(adtr_weight_na, hist=False, color = 'red')\n",
    "sns.distplot(euth_weight_na, hist = False, color = 'black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The p-value associated with the observed value of the test statistic in a t test for age is 0.7998976460043953, \n",
      "which is not significant at the alpha level 0.05.\n"
     ]
    }
   ],
   "source": [
    "adtr_age_na = adtr.age.dropna()\n",
    "euth_age_na = euth.age.dropna()\n",
    "\n",
    "t, p = stats.ttest_ind(\n",
    "    adtr_age_na.values,\n",
    "    euth_age_na.values,\n",
    "    equal_var = False\n",
    ")\n",
    "\n",
    "print(f'The p-value associated with the observed value of the test statistic in a t test for age is {p}, \\nwhich is not significant at the alpha level 0.05.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.1194581280788185 3.0509803921568626\n"
     ]
    }
   ],
   "source": [
    "print(adtr_age_na.mean(), euth_age_na.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16666666666666666"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(adtr_age_na)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20d60472848>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(adtr_age_na, hist = False, color = 'red')\n",
    "sns.distplot(euth_age_na, hist = False, color = 'black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing categorical variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Code 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    52\n",
       "2    14\n",
       "3     7\n",
       "4     3\n",
       "Name: code1, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euth_code1_counts = euth.code1.value_counts()\n",
    "euth_code1_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    32\n",
       "1    25\n",
       "4    25\n",
       "2     6\n",
       "Name: code1, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr_code1_counts = adtr.code1.value_counts()\n",
    "\n",
    "adtr_code1_counts = adtr_code1_counts.drop(labels=[5, 6,7])\n",
    "\n",
    "adtr_code1_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "89.2523245614035\n"
     ]
    }
   ],
   "source": [
    "observed = euth_code1_counts\n",
    "\n",
    "adtr_ratios = adtr_code1_counts / adtr_code1_counts.sum()\n",
    "\n",
    "expected = adtr_ratios * euth_code1_counts.sum()\n",
    "\n",
    "chi_squared_stat = (((observed-expected)**2)/expected).sum()\n",
    "\n",
    "print(chi_squared_stat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Critical value\n",
      "7.814727903251179\n",
      "P value\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "crit = stats.chi2.ppf(q = 0.95, # Find the critical value for 95% confidence*\n",
    "                      df = 3)   # Df = number of variable categories - 1\n",
    "\n",
    "print(\"Critical value\")\n",
    "print(crit)\n",
    "\n",
    "p_value = 1 - stats.chi2.cdf(x=chi_squared_stat,  # Find the p-value\n",
    "                             df=3)\n",
    "print(\"P value\")\n",
    "print(p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20d617f2f48>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(euth.code1.dropna(), kde = False, color = 'black')\n",
    "sns.distplot(adtr.code1.dropna(), kde = False, color = 'red')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M     46\n",
       "F     30\n",
       "NM     6\n",
       "U      2\n",
       "SF     1\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euth.gender.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MN    216\n",
       "FS    164\n",
       "NM     19\n",
       "SF      7\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr.gender.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Male      54\n",
       "Female    31\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for g in range(0, len(euth['gender'])):\n",
    "    if 'F' in euth['gender'][g]:\n",
    "        euth['gender'][g] = 'Female'\n",
    "    else:\n",
    "        euth['gender'][g] = 'Male'\n",
    "euth['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Male      235\n",
       "Female    171\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "for g in range(0, len(adtr['gender'])):\n",
    "    if 'F' in adtr['gender'][g]:\n",
    "        adtr['gender'][g] = 'Female'\n",
    "    else:\n",
    "        adtr['gender'][g] = 'Male'\n",
    "adtr['gender'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.112092161986108\n"
     ]
    }
   ],
   "source": [
    "observed = euth.gender.value_counts()\n",
    "\n",
    "adtr_ratios = adtr.gender.value_counts() / adtr.gender.value_counts().sum()\n",
    "\n",
    "expected = adtr_ratios * euth.gender.value_counts().sum()\n",
    "\n",
    "chi_squared_stat = (((observed-expected)**2)/expected).sum()\n",
    "\n",
    "print(chi_squared_stat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Critical value\n",
      "7.814727903251179\n",
      "P value\n",
      "0.7741558187750788\n"
     ]
    }
   ],
   "source": [
    "crit = stats.chi2.ppf(q = 0.95, # Find the critical value for 95% confidence*\n",
    "                      df = 3)   # Df = number of variable categories - 1\n",
    "\n",
    "print(\"Critical value\")\n",
    "print(crit)\n",
    "\n",
    "p_value = 1 - stats.chi2.cdf(x=chi_squared_stat,  # Find the p-value\n",
    "                             df=3)\n",
    "print(\"P value\")\n",
    "print(p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Euth')"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 2, figsize = (12,4))\n",
    "sns.countplot(adtr['gender'], ax = ax[0], order = ['Male', 'Female'], palette = ['lightblue', 'pink'])\n",
    "sns.countplot(euth['gender'], ax = ax[1], palette = ['lightblue', 'pink'])\n",
    "ax[0].set_title('Non-Euth')\n",
    "ax[1].set_title('Euth')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "adtr_source = adtr.source.dropna().reset_index().reset_index()\n",
    "\n",
    "for i in range(0, len(adtr_source)):\n",
    "    adtr_source['source'][i] = adtr_source['source'][i].lower()\n",
    "\n",
    "adtr_source_counts = adtr_source['source'].value_counts()[0:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "euth_source = euth.source.dropna()\n",
    "\n",
    "for i in range(0, len(euth_source)):\n",
    "    euth_source[i] = euth_source[i].lower()\n",
    "\n",
    "euth_source_counts = euth_source.value_counts()[0:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.3580728152812\n"
     ]
    }
   ],
   "source": [
    "observed = euth_source_counts\n",
    "\n",
    "adtr_ratios = adtr_source_counts / adtr_source_counts.sum()\n",
    "\n",
    "expected = adtr_ratios * euth_source_counts.sum()\n",
    "\n",
    "chi_squared_stat = (((observed-expected)**2)/expected).sum()\n",
    "\n",
    "print(chi_squared_stat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Critical value\n",
      "7.814727903251179\n",
      "P value\n",
      "0.015755235229313547\n"
     ]
    }
   ],
   "source": [
    "crit = stats.chi2.ppf(q = 0.95, # Find the critical value for 95% confidence*\n",
    "                      df = 3)   # Df = number of variable categories - 1\n",
    "\n",
    "print(\"Critical value\")\n",
    "print(crit)\n",
    "\n",
    "p_value = 1 - stats.chi2.cdf(x=chi_squared_stat,  # Find the p-value\n",
    "                             df=3)\n",
    "print(\"P value\")\n",
    "print(p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "adtr_s = pd.DataFrame(adtr_source_counts).reset_index()\n",
    "euth_s = pd.DataFrame(euth_source_counts).reset_index()\n",
    "adtr_s.columns = ['source', 'count']\n",
    "euth_s.columns = ['source', 'count']\n",
    "\n",
    "euth_s = euth_s.sort_values('source')\n",
    "adtr_s = adtr_s.sort_values('source')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(2,1, figsize = (10, 10))\n",
    "sns.barplot(data = adtr_s, x = 'source', y= 'count', ax = ax[0],  palette = ['lightblue', 'pink', 'teal', 'lavender', 'red', 'navy'])\n",
    "sns.barplot(data = euth_s, x = 'source', y= 'count', ax = ax[1],  palette = ['lightblue', 'pink', 'teal', 'lavender', 'red', 'navy'])\n",
    "ax[0].set_title('Non-Euth')\n",
    "ax[1].set_title('Euth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "for row in range(0, len(euth_s)):\n",
    "    euth_s['percentage'] = (euth_s['count'][row] / euth_s['count'].sum())\n",
    "for row in range(0, len(euth_s)):\n",
    "    euth_s['percentage'][row] = (euth_s['count'][row] / euth_s['count'].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zapcu\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "for row in range(0, len(adtr_s)):\n",
    "    adtr_s['percentage'] = (adtr_s['count'][row] / adtr_s['count'].sum())\n",
    "for row in range(0, len(adtr_s)):\n",
    "    adtr_s['percentage'][row] = (adtr_s['count'][row] / adtr_s['count'].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "euth_s['percentage'] = euth_s['percentage']*100\n",
    "adtr_s['percentage'] = adtr_s['percentage']*100\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "euth_s = euth_s.reset_index()\n",
    "adtr_s = adtr_s.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Euth')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2,1, figsize = (10, 10))\n",
    "sns.barplot(data = adtr_s, x = 'source', y= 'percentage', ax = ax[0],  palette = ['lightblue', 'pink', 'teal', 'lavender', 'red', 'navy'])\n",
    "sns.barplot(data = euth_s, x = 'source', y= 'percentage', ax = ax[1],  palette = ['lightblue', 'pink', 'teal', 'lavender', 'red', 'navy'])\n",
    "ax[0].set_title('Non-Euth')\n",
    "ax[1].set_title('Euth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>Difference(%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>acc</td>\n",
       "      <td>0.093842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>fresno</td>\n",
       "      <td>6.048876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>kings</td>\n",
       "      <td>1.251222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>merced</td>\n",
       "      <td>-7.069404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>stockton</td>\n",
       "      <td>-5.415445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>tulare</td>\n",
       "      <td>5.090909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Source  Difference(%)\n",
       "0       acc       0.093842\n",
       "1    fresno       6.048876\n",
       "2     kings       1.251222\n",
       "3    merced      -7.069404\n",
       "4  stockton      -5.415445\n",
       "5    tulare       5.090909"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = list(adtr_s['source'])\n",
    "b = list(adtr_s['percentage'] - euth_s['percentage'])\n",
    "\n",
    "source_differences = pd.DataFrame(b,a).reset_index()\n",
    "\n",
    "source_differences.columns = ['Source', 'Difference(%)']\n",
    "\n",
    "source_differences"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Breed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "adtr_breeds = adtr['breed'].value_counts()[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "euth_breeds = euth['breed'].value_counts()[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "chi                  0.213178\n",
       "shepherd             0.193798\n",
       "terrier              0.151163\n",
       "pit bull             0.108527\n",
       "retriever            0.108527\n",
       "Shepherd             0.077519\n",
       "cattle dog           0.042636\n",
       "poodle               0.034884\n",
       "Terrier, Pit Bull    0.034884\n",
       "husky                0.034884\n",
       "Name: breed, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr_breeds/adtr_breeds.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Shepherd                 0.214286\n",
       "Terrier, Pit Bull        0.214286\n",
       "Australian Cattle Dog    0.142857\n",
       "Retriever, Labrador      0.125000\n",
       "Chihuahua, Short Coat    0.089286\n",
       "Border Collie            0.071429\n",
       "Australian Kelpie        0.035714\n",
       "Basenji                  0.035714\n",
       "Pointer                  0.035714\n",
       "Terrier                  0.035714\n",
       "Name: breed, dtype: float64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euth_breeds/euth_breeds.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Combine the datasets and add a binary label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>animal_id</th>\n",
       "      <th>outcome_date</th>\n",
       "      <th>name</th>\n",
       "      <th>breed</th>\n",
       "      <th>gender</th>\n",
       "      <th>weight</th>\n",
       "      <th>age</th>\n",
       "      <th>reason1</th>\n",
       "      <th>code1</th>\n",
       "      <th>reason2</th>\n",
       "      <th>Status</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>33809028</td>\n",
       "      <td>2017-01-02 00:00:00</td>\n",
       "      <td>Diva</td>\n",
       "      <td>dobie</td>\n",
       "      <td>Female</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>leash reactive</td>\n",
       "      <td>4</td>\n",
       "      <td>rjm</td>\n",
       "      <td>adoption</td>\n",
       "      <td>merced</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>34204286</td>\n",
       "      <td>2017-01-10 00:00:00</td>\n",
       "      <td>Dude</td>\n",
       "      <td>shih tzu</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>9.0</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3</td>\n",
       "      <td>handling sensitivity - skin issues</td>\n",
       "      <td>adoption</td>\n",
       "      <td>acc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>33867509</td>\n",
       "      <td>2016-12-27 00:00:00</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>shepherd</td>\n",
       "      <td>Female</td>\n",
       "      <td>16</td>\n",
       "      <td>3.0</td>\n",
       "      <td>fearful</td>\n",
       "      <td>3</td>\n",
       "      <td>escape behaviors</td>\n",
       "      <td>adoption</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>17160361</td>\n",
       "      <td>2016-12-23 00:00:00</td>\n",
       "      <td>Rusty</td>\n",
       "      <td>chi</td>\n",
       "      <td>Male</td>\n",
       "      <td>7</td>\n",
       "      <td>5.0</td>\n",
       "      <td>fearful of strangers</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>33698313</td>\n",
       "      <td>2016-12-26 00:00:00</td>\n",
       "      <td>Elmer</td>\n",
       "      <td>spaniel</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>5.0</td>\n",
       "      <td>lelash reactive - dogs and people</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adoption</td>\n",
       "      <td>ACC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>401</td>\n",
       "      <td>A43298745</td>\n",
       "      <td>2019-12-15 13:23:00</td>\n",
       "      <td>Bryce</td>\n",
       "      <td>Retriever</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>4.0</td>\n",
       "      <td>leash reactive</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>402</td>\n",
       "      <td>A24091168</td>\n",
       "      <td>2020-01-17 08:52:00</td>\n",
       "      <td>Canelo</td>\n",
       "      <td>Chihuahua, Short Coat</td>\n",
       "      <td>Male</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>leash reactivity</td>\n",
       "      <td>4</td>\n",
       "      <td>aggression human</td>\n",
       "      <td>transfer</td>\n",
       "      <td>stockton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>403</td>\n",
       "      <td>A43336444</td>\n",
       "      <td>2020-01-26 19:27:00</td>\n",
       "      <td>Skinner</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>Male</td>\n",
       "      <td>29</td>\n",
       "      <td>3.0</td>\n",
       "      <td>leash reactivity</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>404</td>\n",
       "      <td>A44463040</td>\n",
       "      <td>2020-07-18 00:00:00</td>\n",
       "      <td>Chesney</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>Male</td>\n",
       "      <td>34</td>\n",
       "      <td>4.0</td>\n",
       "      <td>aggression to  dogs</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>transfer</td>\n",
       "      <td>fresno</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>405</td>\n",
       "      <td>A45163367</td>\n",
       "      <td>2020-08-17 00:00:00</td>\n",
       "      <td>Watson</td>\n",
       "      <td>Border collie</td>\n",
       "      <td>Male</td>\n",
       "      <td>18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>aggression to humans</td>\n",
       "      <td>NaN</td>\n",
       "      <td>leash reactivity</td>\n",
       "      <td>transfer</td>\n",
       "      <td>tulare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>406 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     animal_id        outcome_date     name                  breed  gender  \\\n",
       "0     33809028 2017-01-02 00:00:00     Diva                  dobie  Female   \n",
       "1     34204286 2017-01-10 00:00:00     Dude               shih tzu    Male   \n",
       "2     33867509 2016-12-27 00:00:00    Ariel               shepherd  Female   \n",
       "3     17160361 2016-12-23 00:00:00    Rusty                    chi    Male   \n",
       "4     33698313 2016-12-26 00:00:00    Elmer                spaniel    Male   \n",
       "..         ...                 ...      ...                    ...     ...   \n",
       "401  A43298745 2019-12-15 13:23:00    Bryce              Retriever    Male   \n",
       "402  A24091168 2020-01-17 08:52:00   Canelo  Chihuahua, Short Coat    Male   \n",
       "403  A43336444 2020-01-26 19:27:00  Skinner               Shepherd    Male   \n",
       "404  A44463040 2020-07-18 00:00:00  Chesney               Shepherd    Male   \n",
       "405  A45163367 2020-08-17 00:00:00   Watson          Border collie    Male   \n",
       "\n",
       "     weight  age                            reason1  code1  \\\n",
       "0        24  4.0                     leash reactive      4   \n",
       "1         9  9.0                            fearful      3   \n",
       "2        16  3.0                            fearful      3   \n",
       "3         7  5.0               fearful of strangers      3   \n",
       "4         8  5.0  lelash reactive - dogs and people      4   \n",
       "..      ...  ...                                ...    ...   \n",
       "401      35  4.0                     leash reactive      4   \n",
       "402       3  5.0                   leash reactivity      4   \n",
       "403      29  3.0                   leash reactivity      4   \n",
       "404      34  4.0                aggression to  dogs    NaN   \n",
       "405      18  1.0               aggression to humans    NaN   \n",
       "\n",
       "                                reason2    Status    source  \n",
       "0                                   rjm  adoption    merced  \n",
       "1    handling sensitivity - skin issues  adoption       acc  \n",
       "2                      escape behaviors  adoption    fresno  \n",
       "3                                   NaN  adoption       ACC  \n",
       "4                                   NaN  adoption       ACC  \n",
       "..                                  ...       ...       ...  \n",
       "401                                 NaN  transfer    fresno  \n",
       "402                    aggression human  transfer  stockton  \n",
       "403                                 NaN  transfer    fresno  \n",
       "404                                 NaN  transfer    fresno  \n",
       "405                    leash reactivity  transfer    tulare  \n",
       "\n",
       "[406 rows x 12 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adtr.iloc[:,2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "#create a binary prediction variable:\n",
    "\n",
    "adtr['Euthanized'] = 'No'\n",
    "euth['Euthanized'] = 'Yes'\n",
    "\n",
    "adtr_join = adtr.iloc[:,2:]\n",
    "euth_join = euth.iloc[:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "full = pd.concat([adtr_join, euth_join], sort = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "full = full.reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Build the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
